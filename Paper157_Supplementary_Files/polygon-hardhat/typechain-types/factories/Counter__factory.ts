/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Counter, CounterInterface } from "../Counter";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialCount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "by",
        type: "uint256",
      },
    ],
    name: "Decrement",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "by",
        type: "uint256",
      },
    ],
    name: "Increment",
    type: "event",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "inc",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "by",
        type: "uint256",
      },
    ],
    name: "incBy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506040516105d33803806105d38339818101604052810190602f91906071565b80600081905550506099565b600080fd5b6000819050919050565b6051816040565b8114605b57600080fd5b50565b600081519050606b81604a565b92915050565b6000602082840312156084576083603b565b5b6000609084828501605e565b91505092915050565b61052b806100a86000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd14610051578063371303c01461006f57806370119d0614610079578063b3bcfa8214610095575b600080fd5b61005961009f565b6040516100669190610239565b60405180910390f35b6100776100a5565b005b610093600480360381019061008e9190610285565b6100f6565b005b61009d61018b565b005b60005481565b6000808154809291906100b7906102e1565b91905055507f51af157c2eee40f68107a47a49c32fbbeb0a3c9e5cd37aa56e88e6be92368a8160016040516100ec919061036e565b60405180910390a1565b60008111610139576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101309061040c565b60405180910390fd5b8060008082825461014a919061042c565b925050819055507f51af157c2eee40f68107a47a49c32fbbeb0a3c9e5cd37aa56e88e6be92368a81816040516101809190610239565b60405180910390a150565b60008054116101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c6906104ac565b60405180910390fd5b6000808154809291906101e1906104cc565b91905055507f32814a5bdfd1b8c3d76c49c54e043d6e8aa93d197a09e16599b567135503f7486001604051610216919061036e565b60405180910390a1565b6000819050919050565b61023381610220565b82525050565b600060208201905061024e600083018461022a565b92915050565b600080fd5b61026281610220565b811461026d57600080fd5b50565b60008135905061027f81610259565b92915050565b60006020828403121561029b5761029a610254565b5b60006102a984828501610270565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006102ec82610220565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361031e5761031d6102b2565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061035861035361034e84610329565b610333565b610220565b9050919050565b6103688161033d565b82525050565b6000602082019050610383600083018461035f565b92915050565b600082825260208201905092915050565b7f696e6342793a20696e6372656d656e74206d75737420626520706f736974697660008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006103f6602183610389565b91506104018261039a565b604082019050919050565b60006020820190508181036000830152610425816103e9565b9050919050565b600061043782610220565b915061044283610220565b925082820190508082111561045a576104596102b2565b5b92915050565b7f6465633a20636f756e742063616e6e6f74206265206e65676174697665000000600082015250565b6000610496601d83610389565b91506104a182610460565b602082019050919050565b600060208201905081810360008301526104c581610489565b9050919050565b60006104d782610220565b9150600082036104ea576104e96102b2565b5b60018203905091905056fea26469706673582212204b8141b031a8f0499c556a2a4f110860b5340f48922be7ef987186c6ebcc00fa64736f6c634300081c0033";

type CounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counter__factory extends ContractFactory {
  constructor(...args: CounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialCount: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialCount, overrides || {});
  }
  override deploy(
    initialCount: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialCount, overrides || {}) as Promise<
      Counter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Counter__factory {
    return super.connect(runner) as Counter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CounterInterface {
    return new Interface(_abi) as CounterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Counter {
    return new Contract(address, _abi, runner) as unknown as Counter;
  }
}
