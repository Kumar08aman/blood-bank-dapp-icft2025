/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace BloodBank {
  export type BloodUnitStruct = {
    unitId: BigNumberish;
    donorName: string;
    bloodType: BigNumberish;
    donationDate: BigNumberish;
    expiryDate: BigNumberish;
    status: BigNumberish;
    currentOwner: AddressLike;
    requestedBy: AddressLike;
  };

  export type BloodUnitStructOutput = [
    unitId: bigint,
    donorName: string,
    bloodType: bigint,
    donationDate: bigint,
    expiryDate: bigint,
    status: bigint,
    currentOwner: string,
    requestedBy: string
  ] & {
    unitId: bigint;
    donorName: string;
    bloodType: bigint;
    donationDate: bigint;
    expiryDate: bigint;
    status: bigint;
    currentOwner: string;
    requestedBy: string;
  };
}

export interface BloodBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBloodBank"
      | "addHospital"
      | "admin"
      | "approveTransfer"
      | "bloodUnits"
      | "getAvailableUnits"
      | "getUnitCount"
      | "isBloodBank"
      | "isHospital"
      | "recordNewBloodUnit"
      | "requestUnit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "UnitRequest" | "UnitTransfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBloodBank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addHospital",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveTransfer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bloodUnits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableUnits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnitCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBloodBank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isHospital",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordNewBloodUnit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUnit",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addBloodBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addHospital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bloodUnits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnitCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBloodBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHospital", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordNewBloodUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUnit",
    data: BytesLike
  ): Result;
}

export namespace UnitRequestEvent {
  export type InputTuple = [unitId: BigNumberish, hospital: AddressLike];
  export type OutputTuple = [unitId: bigint, hospital: string];
  export interface OutputObject {
    unitId: bigint;
    hospital: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnitTransferEvent {
  export type InputTuple = [
    unitId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [unitId: bigint, from: string, to: string];
  export interface OutputObject {
    unitId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BloodBank extends BaseContract {
  connect(runner?: ContractRunner | null): BloodBank;
  waitForDeployment(): Promise<this>;

  interface: BloodBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBloodBank: TypedContractMethod<
    [_bloodBankAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addHospital: TypedContractMethod<
    [_hospitalAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  approveTransfer: TypedContractMethod<
    [_unitId: BigNumberish, _hospitalAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  bloodUnits: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string, string] & {
        unitId: bigint;
        donorName: string;
        bloodType: bigint;
        donationDate: bigint;
        expiryDate: bigint;
        status: bigint;
        currentOwner: string;
        requestedBy: string;
      }
    ],
    "view"
  >;

  getAvailableUnits: TypedContractMethod<
    [],
    [BloodBank.BloodUnitStructOutput[]],
    "view"
  >;

  getUnitCount: TypedContractMethod<[], [bigint], "view">;

  isBloodBank: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isHospital: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  recordNewBloodUnit: TypedContractMethod<
    [_donorName: string, _bloodType: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestUnit: TypedContractMethod<
    [_unitId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBloodBank"
  ): TypedContractMethod<
    [_bloodBankAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addHospital"
  ): TypedContractMethod<[_hospitalAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveTransfer"
  ): TypedContractMethod<
    [_unitId: BigNumberish, _hospitalAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bloodUnits"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string, string] & {
        unitId: bigint;
        donorName: string;
        bloodType: bigint;
        donationDate: bigint;
        expiryDate: bigint;
        status: bigint;
        currentOwner: string;
        requestedBy: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableUnits"
  ): TypedContractMethod<[], [BloodBank.BloodUnitStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUnitCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isBloodBank"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isHospital"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordNewBloodUnit"
  ): TypedContractMethod<
    [_donorName: string, _bloodType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestUnit"
  ): TypedContractMethod<[_unitId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "UnitRequest"
  ): TypedContractEvent<
    UnitRequestEvent.InputTuple,
    UnitRequestEvent.OutputTuple,
    UnitRequestEvent.OutputObject
  >;
  getEvent(
    key: "UnitTransfer"
  ): TypedContractEvent<
    UnitTransferEvent.InputTuple,
    UnitTransferEvent.OutputTuple,
    UnitTransferEvent.OutputObject
  >;

  filters: {
    "UnitRequest(uint256,address)": TypedContractEvent<
      UnitRequestEvent.InputTuple,
      UnitRequestEvent.OutputTuple,
      UnitRequestEvent.OutputObject
    >;
    UnitRequest: TypedContractEvent<
      UnitRequestEvent.InputTuple,
      UnitRequestEvent.OutputTuple,
      UnitRequestEvent.OutputObject
    >;

    "UnitTransfer(uint256,address,address)": TypedContractEvent<
      UnitTransferEvent.InputTuple,
      UnitTransferEvent.OutputTuple,
      UnitTransferEvent.OutputObject
    >;
    UnitTransfer: TypedContractEvent<
      UnitTransferEvent.InputTuple,
      UnitTransferEvent.OutputTuple,
      UnitTransferEvent.OutputObject
    >;
  };
}
